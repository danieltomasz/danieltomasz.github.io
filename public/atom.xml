<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daniel Borek personal blog</title><description>A personal musings and learning by Daniel Borek</description><link>https://lines-hugo-theme.netlify.app/</link><language>en</language><copyright>Copyright 2023, Ronalds Vilcins</copyright><lastBuildDate>Fri, 04 Aug 2023 00:00:00 +0000</lastBuildDate><generator>Hugo - gohugo.io</generator><docs>http://cyber.harvard.edu/rss/rss.html</docs><atom:link href="https://ronaldsvilcins.com/atom.xml" rel="self" type="application/atom+xml"/><item><title>PDF tweaks and tips with Quarto</title><link>https://lines-hugo-theme.netlify.app/2023/08/04/pdf-quarto-tips/</link><description>&lt;h2 id="nicer-fonts-and-better--handling-of-figures">Nicer fonts and better handling of figures &lt;a href="#nicer-fonts-and-better--handling-of-figures" class="hash">#&lt;/a>&lt;/h2>
&lt;p>I am sharing with you a fragment of my &lt;code>_quarto.yml&lt;/code> file, with some tweaks I am using to make my pdf output nicer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">format&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">pdf&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">link-citations&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#998;font-style:italic"># &amp;lt;1&amp;gt;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">number-sections&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">reference-section-title&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#d14">&amp;#34;References&amp;#34;&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">pdf-engine&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>xelatex&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">include-in-header&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">text&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>|&lt;span style="color:#d14">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage{epigraph}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %% Code related to fonts and how the output looks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage{mathpazo} % &amp;lt;2&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage[T1]{fontenc}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage[sups,osf]{fbb} % osf (or tosf) for text, not math # &amp;lt;2&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage[scaled=.95]{cabin} % sans serif # &amp;lt;2&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage[varqu,varl]{inconsolata} % sans serif typewriter # &amp;lt;2&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %% Code related to figures in document
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> %%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \usepackage{float} % &amp;lt;3&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \graphicspath{{figures}{chapters/figures}{../figures}{chapters}} # &amp;lt;4&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \let\origfigure\figure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \let\endorigfigure\endfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \renewenvironment{figure}[1][2] {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \expandafter\origfigure\expandafter[H]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> } {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> \endorigfigure
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d14"> }&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I put number as comments, so you can better understand specific lines.&lt;/p>
&lt;ol>
&lt;li>Some options for PDF output (more or less self-explanatory)&amp;gt;&lt;/li>
&lt;li>The font use by default template are ugly format, this look similar but are nicer.&lt;/li>
&lt;li>Forcing figures to be placed where they are in the text&lt;/li>
&lt;li>Allowing to use figures from different folders, and allowing to use relative paths to figures.&lt;/li>
&lt;/ol>
&lt;p>Those are setting I am using to render a working preview of a chapter.&lt;/p>
&lt;!-- The final version will be using a font provided by my university: -->
&lt;h2 id="roman-numbering-for-front-matter-and-arabic-for-main-matter">Roman numbering for front matter and arabic for main matter &lt;a href="#roman-numbering-for-front-matter-and-arabic-for-main-matter" class="hash">#&lt;/a>&lt;/h2>
&lt;p>I am inserting roman numbering for front matter and arabic for main matter.&lt;/p>
&lt;pre tabindex="0">&lt;code>```yaml
format:
pdf:
include-before-body:
text: |
\pagestyle{plain}
\pagenumbering{roman}
&lt;/code>&lt;/pre>&lt;p>In main tex I switch back to arabic numbering:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tex" data-lang="tex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">\pagenumbering&lt;/span>&lt;span style="color:#0086b3">{&lt;/span>arabic&lt;span style="color:#0086b3">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="problem-with-_indexmd_-and-inserted-blank-page">Problem with &lt;em>index.md&lt;/em> and inserted blank page &lt;a href="#problem-with-_indexmd_-and-inserted-blank-page" class="hash">#&lt;/a>&lt;/h2>
&lt;p>As you write complex project, you want might want to have separate files for each chapter.
When you are using &lt;code>quarto&lt;/code> to render your project, you could put them inside &lt;code>index.md&lt;/code> in your root folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>{{include &amp;#34;chapters/chapter1.qmd&amp;#34;}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{{include &amp;#34;chapters/chapter2.qmd&amp;#34;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using &lt;code>include&lt;/code> filter will add the content of the files to the &lt;code>index.md&lt;/code> file when compiling.
This is nice solution, but I have a problem when I want to use &lt;code>quarto preview&lt;/code> to update and monitor resulting pdf when I change something in source files.
Unfortunately, &lt;code>quarto preview&lt;/code> does not update output &lt;code>.pdf&lt;/code> file when files added with &lt;code>include&lt;/code> change, so I needed to choose another solution.&lt;/p>
&lt;p>Alternative solution is to add chapters into you &lt;code>_quarto.yml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080">project&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">output-dir&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>_output&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">execute-dir&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>file&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">book&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">title&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Title of my thesis or book&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">author&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">name&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>Author Name&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">chapters&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- index.qmd&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- chapters/chapter1.md&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>- chapters/chapter1.md&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I want to all of my content of to live in the &amp;lsquo;chapters&amp;rsquo; folder.
Unfortunately currently in &lt;code>quatro&lt;/code> users always need to include &lt;code>index.md&lt;/code> (it makes sense when generating &lt;code>html&lt;/code> as output, but not always when generating `pdf``).&lt;/p>
&lt;p>I can leave the &lt;code>index.md&lt;/code> file empty, but then I will have an empty page between my table of content and first chapter.
I can include the first chapter into index.md but then we were hitting the same problem on smaller scale again.&lt;/p>
&lt;h3 id="my-solution">My solution &lt;a href="#my-solution" class="hash">#&lt;/a>&lt;/h3>
&lt;p>By default, latex is adding a page break after each chapter, and the &lt;code>index.md&lt;/code> file is treated as a chapter, even if empty.
I am cheating a bit, not solving the problem, but hiding it by relaxing `\clearpage`` behaviour in latex.&lt;/p>
&lt;p>I am leaving my &lt;code>index.md&lt;/code> file almost empty, I&amp;rsquo;m just adding this latex code &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tex" data-lang="tex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">\let\standardclearpage\clearpage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">\let\clearpage\relax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then within my first chapter when my content start, I am returning to standard behaviour of &lt;code>\clearpage&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tex" data-lang="tex">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">\let\clearpage\standardclearpage&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way I am not adding any extra page between my table of content and first chapter, and I can use &lt;code>quarto preview&lt;/code> to monitor my changes.
In future the &lt;code>quatro&lt;/code> behaviour might change regarding inclusion of `index.md``, you can follow discussion here:&lt;/p>
&lt;h2 id="useful-materials">Useful materials &lt;a href="#useful-materials" class="hash">#&lt;/a>&lt;/h2>
&lt;p>I just saw this post published on the blog of Cameron Patrick, it contains more useful information about writing thesis with &lt;code>quarto&lt;/code>: &lt;a href="https://cameronpatrick.com/post/2023/07/quarto-thesis-formatting/">https://cameronpatrick.com/post/2023/07/quarto-thesis-formatting/&lt;/a>.&lt;/p>
&lt;p>I am personally using modified &lt;code>quarto-thesis&lt;/code> template for my thesis, you can find it here: &lt;a href="https://github.com/nmfs-opensci/quarto-thesis">https://github.com/nmfs-opensci/quarto-thesis&lt;/a>
If you don&amp;rsquo;t use quarto, but you want to play with, you can modify it online on the Posit virtual &lt;code>Rstudio&lt;/code> instance &lt;a href="https://rstudio.cloud/content/4383755">https://rstudio.cloud/content/4383755&lt;/a> (free account required)&lt;/p>
&lt;h2 id="references">References &lt;a href="#references" class="hash">#&lt;/a>&lt;/h2>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://tex.stackexchange.com/a/176109">https://tex.stackexchange.com/a/176109&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://lines-hugo-theme.netlify.app/2023/08/04/pdf-quarto-tips/</guid><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate></item><item><title>From Quarto back to Hugo</title><link>https://lines-hugo-theme.netlify.app/2023/08/03/back-to-hugo/</link><description>&lt;p>I am using the Hugo lines theme, you can find it &lt;a href="https://github.com/ronv/lines">here&lt;/a>.
I was experiment with pure Jekyll, then Hugo and a year ago I switched to Quarto.
Quarto is great for scientific publications, but I find it too limiting for a blog.&lt;/p>
&lt;p>The structure of the blog require you to put every of your posts into its own folder with &lt;code>index.qmd&lt;/code> file.&lt;/p>
&lt;p>This is great for showcasing of your blog, but it is not very convenient for writing.
I am using Pandoc/Quarto almost anywhere I can, but I as the project primary goal is to be a scientific publishing tool,
the blog part will be always a bit of an afterthought. To give the justice to the team, given their limited resources, they are great with fast fixing bug and adding new features. There are nice things planned, like a support (only about people) for &lt;code>slug&lt;/code> and permalinks (&lt;a href="https://github.com/quarto-dev/quarto-cli/issues/6422">here&lt;/a>) but they don&amp;rsquo;t land there soon.
It was a bit of point of friction for me, so I decided to change it and returned to Hugo as static site generator.&lt;/p>
&lt;p>Fortunately, in a world of static site generators, there is a “free lunch”.
I can have posts with executable R and Python code, and I can have a blog with a nice structure.
Quarto can render from a markdown &lt;code>qmd&lt;/code> format to Markdown with Hugo syntax.
You can find more how to set up Hugo with Quarto official page](&lt;a href="https://quarto.org/docs/output-formats/hugo.html)">https://quarto.org/docs/output-formats/hugo.html)&lt;/a>.&lt;/p>
&lt;p>A quick tour of my setup (you can find the same information on Quarto pages):&lt;/p>
&lt;p>I added this to my &lt;code>config.toml&lt;/code> file:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>ignoreFiles = [ &lt;span style="color:#d14">&amp;#34;\\.qmd$&amp;#34;&lt;/span>, &lt;span style="color:#d14">&amp;#34;\\.ipynb$&amp;#34;&lt;/span>, &lt;span style="color:#d14">&amp;#34;\\.py$&amp;#34;&lt;/span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[markup]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> defaultMarkdownHandler = &lt;span style="color:#d14">&amp;#34;goldmark&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [markup.goldmark.renderer]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unsafe = &lt;span style="color:#000;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I have a &lt;code>content/posts&lt;/code> folder with all my posts. Inside it I have a subfolder for folders with &lt;code>Quarto&lt;/code>, with &lt;code>index.qmd&lt;/code> file.&lt;/p>
&lt;p>I put this &lt;code>_quarto.yml&lt;/code> file in the root of my Hugo project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000080">project&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">type&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>hugo&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">format&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">hugo-md&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">code-fold&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">true&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">html-math-method&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>webtex&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb">&lt;/span>&lt;span style="color:#000080">execute&lt;/span>:&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000080">warning&lt;/span>:&lt;span style="color:#bbb"> &lt;/span>&lt;span style="color:#000;font-weight:bold">false&lt;/span>&lt;span style="color:#bbb">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every time I want to publish a post written in &lt;code>qmd&lt;/code> files, I run &lt;code>quarto render&lt;/code> in the root of my Hugo project.
I am thinking about adding this to my &lt;code>Makefile&lt;/code> to make it even easier.&lt;/p>
&lt;p>I also found two nice blog posts from people using Quarto with Hugo:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://cedricbatailler.me/blog/2022-apero/">🪄 Quarto, Hugo, Apero | Cédric Batailler&lt;/a>. Cédric is using lovely Apero theme. I am finding this theme great, but I choose to stick with minimalism of lines theme.&lt;/li>
&lt;li>&lt;a href="https://www.paulrjohnson.net/2022/09/setting-up-a-hugo-website-with-quarto/">Setting up a Hugo Website with Quarto | Paul Johnson&lt;/a>. Paul is using a PaperMod theme, which is also very nice. He is a bit more technical in his post.&lt;/li>
&lt;/ul>
&lt;p>Fun fact: After using Quarto for a year, I sometimes still need to check if it is &lt;em>Quarto&lt;/em> or &lt;em>Quatro&lt;/em> (I made such mistake in the beginning of this post :)).&lt;/p>
&lt;p>As per wikipedia entry&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>:&lt;/p>
&lt;blockquote>
&lt;p>A quarto (from Latin quārtō, ablative form of quārtus, fourth) is a book or pamphlet made up of one or more full sheets of paper on which 8 pages of text were printed, which were then folded two times to produce four leaves.&lt;/p>
&lt;/blockquote>
&lt;p>I am stillclose to original meaning, even when I misspell it (&lt;em>quatro&lt;/em> means &lt;em>four&lt;/em> in Portuguese and Italian).&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Quarto">Quarto - Wikipedia&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><author>ronalds.vilcins@gmail.com (Ronalds Vilcins)</author><guid>https://lines-hugo-theme.netlify.app/2023/08/03/back-to-hugo/</guid><pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate></item></channel></rss>